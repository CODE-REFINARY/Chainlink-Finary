"""
Django settings for Chainlink project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# This package is used in the database definition section to parse the DATABASE_UR environment var that Heroku defines
# for the postgres addon.
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if config("DEBUG_BOOL").upper() == "TRUE" else False

ALLOWED_HOSTS = ['*']

# This is now required with Django 4.0. This is a list of trusted origins for unsafe requests (e.g. POST).
CSRF_TRUSTED_ORIGINS = ['https://www.chainlinkfinary.com', 'https://chainlink-finary.herokuapp.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Chainlink',
    'Patchwork',
    'YACalendar',
    'CFScrape',
    'blog',
    'django_celery_beat',
    "whitenoise.runserver_nostatic",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Chainlink.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "Patchwork.context_processors.react_static",
            ],
        },
    },
]

WSGI_APPLICATION = 'Chainlink.wsgi.application'

# CSRF
CSRF_USE_SESSIONS = True  # store the CSRF token in the user session instead of a cookie
CSRF_COOKIE_HTTPONLY = False  # no practical benefit here

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    # This is the connection to the postgres database. In the docker environment this requires the DATABASE_URL to
    # be defined in the .env file. In Heroku this variable is defined automatically as an environment var so there's
    # minimal steps required to get it to run in Heroku. This is why we use the dj_database_url library here.
    'default': dj_database_url.config(default=config('DATABASE_URL'), conn_max_age=600)
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Pacific'

USE_I18N = True

USE_L10N = True

USE_TZ = True  # Make dates timezone aware

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# This is where collectstatic will place static files for serving
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# This is appending to the base url when serving static files in production
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), os.path.join(BASE_DIR, 'static', 'react', 'static')]
REACT_ROOT = os.path.join(BASE_DIR, "staticfiles", "react", "build")
REACT_STATIC_ROOT = os.path.join(STATIC_URL, "react", "static")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# This is the URL to the media folder that users see when making network requests to get images.
MEDIA_URL = '/media/'
# This is the actual URL on the host system that points to where the media files are stored.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Email Connection Details/Credentials
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST", cast=str, default=None)
EMAIL_PORT = config("EMAIL_PORT", cast=str, default='587')
EMAIL_HOST_USER = config("EMAIL_HOST_USER", cast=str, default=None)
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", cast=str, default=None)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool, default=True)  # Use EMAIL_PORT 587 for TLS
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool, default=False)  # EUse MAIL_PORT 465 for SSL

# Celery Beat
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# REDIS_URL is an environment variable that's managed automatically in Heroku, so we don't have to define a Heroku
# config variable in Heroku (but we do have to give it a value for the Docker environment).
CELERY_BROKER_URL = config("REDIS_URL", cast=str, default=None)
CELERY_BACKEND_URL = config("REDIS_URL", cast=str, default=None)
